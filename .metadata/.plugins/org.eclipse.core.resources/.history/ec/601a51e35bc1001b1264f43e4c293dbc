package wp.FitnessCentar.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import wp.FitnessCentar.entity.dto.TrenerDTO;
import wp.FitnessCentar.model.Trener;
import wp.FitnessCentar.service.TrenerService;

@RestController
@RequestMapping(value = "/api/trener") //u value definisemo putanjuu do ovog kontrolera, localhost 8080/api/trener..
public class TrenerController {

    private final TrenerService trenerService; //navedemo polje i napravimo mu konstruktor za emplcont koji prima kao par taj servis i taj par se dodeli polju emp.serv.

    // constructor-based dependency injection
    @Autowired
    public TrenerController(TrenerService trenerService) {
        this.trenerService = trenerService;
    }
    
    //registracija novog clana
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<TrenerDTO> createTrener(@RequestBody TrenerDTO trenerDTO) throws Exception {
        // Kreiramo objekat klase Clan, tako što za vrednosti atributa uzimamo
        // vrednosti iz primljenog DTO objekta
    	Trener trener = new Trener(null, trenerDTO.getKorisnicko_ime(), trenerDTO.getLozinka(),
                trenerDTO.getIme(),  trenerDTO.getPrezime(),  trenerDTO.getKontakt_telefon(),  trenerDTO.getDatum_rodjenja(), trenerDTO.getUloga(), null, false, null, null, null);

        // Pozivanjem metode servisa kreiramo novog zaposlenog
        Trener newTrener = trenerService.create(trener);

        // Mapiramo novog zaposlenog na DTO objekat koji vraćamo kroz body odgovora
        TrenerDTO newTrenerDTO = new TrenerDTO(newTrener.getId(), newTrener.getKorisnicko_ime(),
                newTrener.getLozinka(), newTrener.getIme(), newTrener.getPrezime(), newTrener.getKontakt_telefon(), newTrener.getDatum_rodjenja(), newTrener.getUloga());

        // Vraćamo odgovor 201 CREATED, a kroz body odgovora šaljemo podatke o novokreiranom
        // zaposlenom, uključujući i ID koji mu je dodeljen
        return new ResponseEntity<>(newTrenerDTO, HttpStatus.CREATED);
    }
}
